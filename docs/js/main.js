const form=document.getElementById("search-form"),submitBtn=document.getElementById("search-btn"),count=document.getElementById("count"),maxResultNum=10;function submitOnEnter(e){"Enter"!==e.key||e.shiftKey||(e.preventDefault(),e.target.closest("#search-form").dispatchEvent(new Event("submit")))}async function fetchRepos(t){t.preventDefault();var t=t.target,r=t.query.value.trim(),t=(t.query.value=r,validate(t.query));if(t){t=`https://api.github.com/search/repositories?${"q="+encodeURIComponent(""+r)}&per_page=`+maxResultNum;let e;try{e=await fetch(t)}catch(e){return void displayError("Возникла ошибка в сетевом запросе: "+e.message)}e.ok?(r=await e.json(),count.textContent=r.total_count,console.log(r),constructList(r)):displayError("Возникла ошибка в сетевом запросе: HTTP Error "+e.status)}}function constructList(e){let a=document.querySelector(".repositories__list");a.innerHTML="";var t=e.items;switch(e.total_count){case 0:displayError("Ничего не найдено");break;default:{t.forEach(e=>{var t=document.createElement("li"),r=(t.className="repositories__list-item",t.insertAdjacentHTML("afterbegin",`<div class="repository">
                                <h3 class="repository__title"><a class="repository__link repo-link" target="_blank"></a></h3>
                                <p class="repository__desc"></p>
                                <div class="repository__info">
                                <span class="repository__author">Автор: <a class="repository__link author-link" target="_blank"></a></span>
                                <span class="repository__proglang"></span>
                                <span class="repository__last-update"></span></div></div>`),t.querySelector(".repo-link")),r=(r.textContent=e.name,r.href=e.html_url,t.querySelector(".repository__desc").textContent=e.description,t.querySelector(".author-link")),r=(r.textContent=e.owner.login,r.href=e.owner.html_url,t.querySelector(".repository__proglang").textContent="Язык программирования: "+(e.language??"отсутствует"),buildDateString(new Date(e.updated_at)));t.querySelector(".repository__last-update").textContent="Последнее обновление: "+r,a.append(t)});break}}}function buildDateString(e){let t;switch(e.getMonth()){case 0:t="января";break;case 1:t="февраля";break;case 2:t="марта";break;case 3:t="апреля";break;case 4:t="мая";break;case 5:t="июня";break;case 6:t="июля";break;case 7:t="августа";break;case 8:t="сентября";break;case 9:t="октября";break;case 10:t="ноября";break;case 11:t="декабря"}return`${e.getDate()} ${t} `+e.getFullYear()}function displayError(e){var t=document.createElement("li"),r=document.querySelector(".repositories__list");count.textContent=0,t.textContent=e,r.innerHTML="",r.append(t)}function validate(e){return e.validity.valueMissing?e.setCustomValidity("Поле не должно быть пустым или состоять только из пробелов"):e.setCustomValidity(""),e.reportValidity()}form.addEventListener("submit",fetchRepos),form.addEventListener("keydown",submitOnEnter),form.query.onfocus=e=>{e.target.placeholder=""},form.query.onblur=e=>{""===e.target.value&&(e.target.placeholder="Введите название репозитория")},form.query.oninput=e=>{e.target.setCustomValidity("")},submitBtn.onclick=e=>{e.preventDefault(),e.target.closest("#search-form").dispatchEvent(new Event("submit"))};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
